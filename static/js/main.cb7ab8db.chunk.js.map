{"version":3,"sources":["components/Menu/Menu.tsx","components/Navbar/Navbar.tsx","components/Home/Home.tsx","components/Banner/Banner.tsx","components/Menu/TakeoutMenu.tsx","components/Contact/Contact.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Languages","Navbar","useState","open","setOpen","navbarRef","useRef","useEffect","handleClick","e","current","contains","target","document","addEventListener","removeEventListener","ref","className","onClick","icon","faBars","size","navbar","map","item","index","key","to","route","name","Home","title","home","zh","en","toUpperCase","description","href","address","phone","display","Banner","props","tooltipHidden","setTooltipHidden","show","setShow","message","tooltipMessages","toggleTooltip","onMouseEnter","onMouseLeave","faInfoCircle","Menu","ENGLISH","language","setLanguage","showBanner","setShowBanner","menu","categories","activeCategory","setActiveCategory","sliderRef","scroll","amount","scrollTo","left","scrollLeft","behavior","delivery","discounts","CHINESE","VIETNAMESE","faChevronLeft","category","style","backgroundImage","image","backgroundPosition","backgroundSize","backgroundRepeat","faChevronRight","items","number","price","TakeoutMenu","some","Array","isArray","p","entrees","entree","Contact","googleMapRef","googleMap","marker","restaurantLocation","lat","lng","googleMapScript","createElement","src","process","window","body","appendChild","google","maps","Map","zoom","center","disableDefaultUI","Marker","position","contact","location","split","line","label","hours","day","App","basename","path","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.cb7ab8db.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport Banner from '../Banner/Banner';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faChevronLeft,\n  faChevronRight,\n} from '@fortawesome/free-solid-svg-icons';\nimport menu from './menu.json';\nimport './Menu.css';\n\ninterface ICategory {\n  name: IMultiLanguageString;\n  image: string;\n  items: IItem[];\n  description?: IMultiLanguageString;\n}\n\ninterface IMultiLanguageString {\n  en: string;\n  zh: string;\n  vi: string;\n}\n\ninterface IItem {\n  number: string;\n  name: IMultiLanguageString;\n  price: string;\n}\n\nenum Languages {\n  ENGLISH = 'en',\n  CHINESE = 'zh',\n  VIETNAMESE = 'vi',\n}\n\nconst Menu = () => {\n  const [language, setLanguage] = useState(Languages.ENGLISH);\n  const [showBanner, setShowBanner] = useState(true);\n  const [activeCategory, setActiveCategory] = useState<ICategory>(\n    menu.categories[0]\n  );\n  const sliderRef = useRef<HTMLDivElement>(null);\n\n  const scroll = (amount: number) =>\n    sliderRef.current?.scrollTo({\n      left: sliderRef.current.scrollLeft + amount,\n      behavior: 'smooth',\n    });\n\n  useEffect(() => {\n    document.title = 'Menu | Emerald Palace';\n  }, []);\n\n  return (\n    <div className={`menu ${showBanner && 'lower'}`}>\n      <Banner\n        show={showBanner}\n        setShow={setShowBanner}\n        message={menu.delivery}\n        tooltipMessages={menu.discounts}\n      />\n      <div className=\"languages\">\n        <button\n          className={`${language === Languages.ENGLISH && 'active'}`}\n          onClick={() => setLanguage(Languages.ENGLISH)}\n        >\n          English\n        </button>\n        <button\n          className={`${language === Languages.CHINESE && 'active'}`}\n          onClick={() => setLanguage(Languages.CHINESE)}\n        >\n          繁體中文\n        </button>\n        <button\n          className={`${language === Languages.VIETNAMESE && 'active'}`}\n          onClick={() => setLanguage(Languages.VIETNAMESE)}\n        >\n          Tiếng Việt\n        </button>\n      </div>\n      <div className=\"slider-container\">\n        <div className=\"left\" onClick={() => scroll(-500)}>\n          <FontAwesomeIcon icon={faChevronLeft} size=\"lg\" />\n        </div>\n        <div ref={sliderRef} className=\"slider\">\n          {menu.categories.map((category: ICategory, index) => (\n            <div\n              key={index}\n              className=\"category\"\n              style={{\n                backgroundImage: `linear-gradient(rgba(0, 0, 0, 0.4), rgba(0, 0, 0, 0.4)), url(${category.image})`,\n                backgroundPosition: 'center',\n                backgroundSize: 'cover',\n                backgroundRepeat: 'no-repeat',\n              }}\n              onClick={() => setActiveCategory(category)}\n            >\n              <span>{category.name[language]}</span>\n            </div>\n          ))}\n        </div>\n        <div className=\"right\" onClick={() => scroll(500)}>\n          <FontAwesomeIcon icon={faChevronRight} size=\"lg\" />\n        </div>\n      </div>\n      <div className=\"active-category\">\n        <div className=\"flex row\">\n          <h1>{activeCategory.name[language]}</h1>\n        </div>\n        {activeCategory.description && (\n          <div className=\"description\">\n            <span>{activeCategory.description[language]}</span>\n          </div>\n        )}\n        <table>\n          <tbody>\n            {activeCategory.items.map(\n              ({ number, name, price }: IItem, index) => (\n                <tr key={index}>\n                  <td className=\"number\">{number}</td>\n                  <td className=\"name\">\n                    <span>{name[language]}</span>\n                  </td>\n                  <td className=\"price\">{price}</td>\n                </tr>\n              )\n            )}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default Menu;\n","import React, { useRef, useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBars } from '@fortawesome/free-solid-svg-icons';\nimport navbar from './navbar.json';\nimport './Navbar.css';\n\nconst Navbar = () => {\n  const [open, setOpen] = useState(false);\n  const toggleOpen = () => setOpen(!open);\n  const navbarRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const handleClick = (e: UIEvent) => {\n      if (navbarRef.current && !navbarRef.current.contains(e.target as Node)) {\n        setOpen(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClick);\n    document.addEventListener('touchstart', handleClick);\n    return () => {\n      document.removeEventListener('mousedown', handleClick);\n      document.removeEventListener('touchstart', handleClick);\n    };\n  }, []);\n\n  return (\n    <div ref={navbarRef} className={`navbar ${open && 'open'}`}>\n      <button className=\"hamburger\" onClick={toggleOpen}>\n        <FontAwesomeIcon icon={faBars} size=\"3x\" />\n      </button>\n      {navbar.map((item, index) => (\n        <Link key={index} to={item.route}>\n          <div className={`nav-item ${open && 'open'}`}>{item.name}</div>\n        </Link>\n      ))}\n    </div>\n  );\n};\n\nexport default Navbar;\n","import React, { useEffect } from 'react';\nimport home from './home.json';\nimport './Home.css';\n\nconst Home = () => {\n  useEffect(() => {\n    document.title = 'Emerald Palace';\n  }, []);\n\n  return (\n    <div className=\"home\">\n      <div className=\"center\">\n        <div className=\"logo\">\n          <span>{home.name.zh}</span>\n        </div>\n        <span className=\"name\">{home.name.en.toUpperCase()}</span>\n        <span className=\"description\">{home.description.toUpperCase()}</span>\n        <div className=\"contact-info\">\n          <a href={`https://maps.google.com/?q=${home.address}`}>\n            {home.address.toUpperCase()}\n          </a>\n          <a href={`tel:${home.phone.href}`}>{home.phone.display}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useState, Dispatch, SetStateAction } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faInfoCircle } from '@fortawesome/free-solid-svg-icons';\nimport './Banner.css';\n\ninterface IProps {\n  show: boolean;\n  setShow: Dispatch<SetStateAction<boolean>>;\n  message: string;\n  tooltipMessages: string[];\n}\n\nconst Banner = (props: IProps) => {\n  const [tooltipHidden, setTooltipHidden] = useState(true);\n  const { show, setShow, message, tooltipMessages } = props;\n\n  const toggleTooltip = () => setTooltipHidden(!tooltipHidden);\n\n  return (\n    <div className={`banner ${!show && 'dismissed'}`}>\n      <div onMouseEnter={toggleTooltip} onMouseLeave={toggleTooltip}>\n        <FontAwesomeIcon icon={faInfoCircle} />\n        <div className={`tooltip ${tooltipHidden && 'hidden'}`}>\n          {tooltipMessages.map((message, index) => (\n            <li key={index}>{message}</li>\n          ))}\n        </div>\n      </div>\n      <div className=\"message\">{message}</div>\n      <div className=\"close\" onClick={() => setShow(false)}>\n        ✕\n      </div>\n    </div>\n  );\n};\n\nexport default Banner;\n","import React, { useState, useRef, useEffect } from 'react';\nimport Banner from '../Banner/Banner';\nimport menu from './takeout-menu.json';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faChevronLeft,\n  faChevronRight,\n} from '@fortawesome/free-solid-svg-icons';\nimport './Menu.css';\n\ninterface ICategory {\n  name: string;\n  image: string;\n  items: IItem[];\n  entrees?: IEntree[];\n}\n\ninterface IEntree {\n  number: string;\n  name: string;\n}\n\ninterface IItem {\n  number?: string;\n  name: string;\n  description?: string;\n  price: string | string[];\n}\n\nconst TakeoutMenu = () => {\n  const [showBanner, setShowBanner] = useState(true);\n  const [activeCategory, setActiveCategory] = useState<ICategory>(\n    menu.categories[0]\n  );\n  const sliderRef = useRef<HTMLDivElement>(null);\n\n  const scroll = (amount: number) =>\n    sliderRef.current?.scrollTo({\n      left: sliderRef.current.scrollLeft + amount,\n      behavior: 'smooth',\n    });\n\n  useEffect(() => {\n    document.title = 'Takeout Menu | Emerald Palace';\n  }, []);\n\n  return (\n    <div className={`menu ${showBanner && 'lower'}`}>\n      <Banner\n        show={showBanner}\n        setShow={setShowBanner}\n        message={menu.delivery}\n        tooltipMessages={menu.discounts}\n      ></Banner>\n      <div className=\"slider-container\">\n        <div className=\"left\" onClick={() => scroll(-300)}>\n          <FontAwesomeIcon icon={faChevronLeft} size=\"lg\" />\n        </div>\n        <div ref={sliderRef} className=\"slider\">\n          {menu.categories.map((category: ICategory, index) => (\n            <div\n              key={index}\n              className=\"category\"\n              style={{\n                backgroundImage: `linear-gradient(rgba(0, 0, 0, 0.4), rgba(0, 0, 0, 0.4)), url(${category.image})`,\n                backgroundPosition: 'center',\n                backgroundSize: 'cover',\n                backgroundRepeat: 'no-repeat',\n              }}\n              onClick={() => setActiveCategory(category)}\n            >\n              {category.name}\n            </div>\n          ))}\n        </div>\n        <div className=\"right\" onClick={() => scroll(300)}>\n          <FontAwesomeIcon icon={faChevronRight} size=\"lg\" />\n        </div>\n      </div>\n      <div className=\"active-category\">\n        <h1>{activeCategory.name}</h1>\n        <table>\n          <tbody>\n            {activeCategory.items.some((item) => Array.isArray(item.price)) && (\n              <tr>\n                <th></th>\n                <th></th>\n                <th>Small</th>\n                <th>Large</th>\n              </tr>\n            )}\n            {activeCategory.items.map((item: IItem, index) => (\n              <tr key={index}>\n                {item.number && <td className=\"number\">{item.number}</td>}\n                <td className=\"name\">\n                  <div>\n                    <div>{item.name}</div>\n                    <div className=\"description\">{item.description}</div>\n                  </div>\n                </td>\n                {Array.isArray(item.price) ? (\n                  item.price.map((p, index) => <td key={index}>{p}</td>)\n                ) : (\n                  <td className=\"price\">{item.price}</td>\n                )}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n        {activeCategory.name === 'Dinner Specials' && (\n          <>\n            <h1>Entrées</h1>\n            <table>\n              <tbody>\n                {activeCategory.entrees?.map((entree: IEntree, index) => (\n                  <tr key={index}>\n                    <td>{entree.number}</td>\n                    <td>{entree.name}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default TakeoutMenu;\n","import React, { useRef, useEffect } from 'react';\nimport contact from './contact.json';\nimport './Contact.css';\n\ndeclare global {\n  interface Window {\n    google: typeof google;\n  }\n}\n\ninterface Location {\n  lat: number;\n  lng: number;\n}\n\nconst GOOGLE_MAP_API_KEY = process.env.REACT_APP_GOOGLE_MAP_API_KEY;\n\nconst Contact = () => {\n  let googleMapRef = useRef<HTMLDivElement>(null);\n  let googleMap = useRef<google.maps.Map>();\n  let marker = useRef<google.maps.Marker>();\n\n  useEffect(() => {\n    const restaurantLocation: Location = { lat: 51.098501, lng: -113.962162 };\n    const createGoogleMap = () =>\n      new window.google.maps.Map(googleMapRef.current as Element, {\n        zoom: 16,\n        center: restaurantLocation,\n        disableDefaultUI: true,\n      });\n\n    const createMarker = () =>\n      new window.google.maps.Marker({\n        position: restaurantLocation,\n        map: googleMap.current,\n      });\n\n    const googleMapScript = document.createElement('script');\n\n    googleMapScript.src = `https://maps.googleapis.com/maps/api/js?key=${GOOGLE_MAP_API_KEY}`;\n    window.document.body.appendChild(googleMapScript);\n\n    googleMapScript.addEventListener('load', () => {\n      googleMap.current = createGoogleMap();\n      marker.current = createMarker();\n    });\n  }, []);\n\n  useEffect(() => {\n    document.title = 'Contact | Emerald Palace';\n  }, []);\n\n  return (\n    <div className=\"contact\">\n      <h2>CONTACT US</h2>\n      <div className=\"desktop\">\n        <div className=\"google-map\" ref={googleMapRef} />\n        <div className=\"contact-info\">\n          <div className=\"section\">\n            <h3>LOCATION</h3>\n            <a href={contact.location.href}>\n              {contact.location.address.split(',').map((line, index) => (\n                <span key={index} className=\"address\">\n                  {line}\n                </span>\n              ))}\n            </a>\n          </div>\n          <div className=\"section\">\n            <h3>PHONE</h3>\n            <a href={contact.phone.href}>{contact.phone.label}</a>\n          </div>\n          <div className=\"section\">\n            <h3>HOURS</h3>\n            <div className=\"times\">\n              <ul className=\"days\">\n                {contact.hours.map((item, index) => (\n                  <li key={index}>{item.day}</li>\n                ))}\n              </ul>\n              <ul className=\"hours\">\n                {contact.hours.map((item, index) => (\n                  <li key={index}>{item.hours}</li>\n                ))}\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Contact;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Navbar from './components/Navbar/Navbar';\nimport Home from './components/Home/Home';\nimport Menu from './components/Menu/Menu';\nimport TakeoutMenu from './components/Menu/TakeoutMenu';\nimport Contact from './components/Contact/Contact';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router basename=\"/Emerald-Palace/\">\n      <div className=\"app\">\n        <Navbar />\n        <div className=\"main\">\n          <Switch>\n            <Route path=\"/menu\">\n              <Menu />\n            </Route>\n            <Route path=\"/takeout-menu\">\n              <TakeoutMenu />\n            </Route>\n            <Route path=\"/contact\">\n              <Contact />\n            </Route>\n            <Route path=\"/\">\n              <Home />\n            </Route>\n          </Switch>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}