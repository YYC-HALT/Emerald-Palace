{"version":3,"sources":["components/Menu/Menu.tsx","components/Navbar/Navbar.tsx","components/Home/Home.tsx","components/About/About.tsx","components/Banner/Banner.tsx","components/Menu/TakeoutMenu.tsx","components/Contact/Contact.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Languages","Navbar","location","useLocation","useState","transparent","setTransparent","useEffect","path","pathname","className","to","Home","href","About","Banner","props","dismissed","setDismissed","tooltipHidden","setTooltipHidden","message","tooltipMessages","toggleTooltip","onMouseEnter","onMouseLeave","icon","faInfoCircle","map","index","key","onClick","Menu","ENGLISH","language","menu","categories","activeCategory","setActiveCategory","sliderRef","useRef","scroll","amount","current","scrollTo","left","scrollLeft","behavior","delivery","discounts","faChevronLeft","size","ref","category","name","style","backgroundImage","image","backgroundPosition","backgroundSize","backgroundRepeat","faChevronRight","description","items","number","price","TakeoutMenu","some","item","Array","isArray","p","entrees","entree","Contact","googleMapRef","googleMap","marker","restaurantLocation","lat","lng","createGoogleMap","window","google","maps","Map","zoom","center","disableDefaultUI","createMarker","Marker","position","googleMapScript","document","createElement","src","process","body","appendChild","addEventListener","App","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.6087ce88.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react';\nimport Banner from '../Banner/Banner';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faChevronLeft,\n  faChevronRight,\n} from '@fortawesome/free-solid-svg-icons';\nimport menu from './menu.json';\nimport './Menu.css';\n\ninterface ICategory {\n  name: IMultiLanguageString;\n  image: string;\n  items: IItem[];\n  description?: IMultiLanguageString;\n}\n\ninterface IMultiLanguageString {\n  en: string;\n  zh: string;\n  vi: string;\n}\n\ninterface IItem {\n  number: string;\n  name: IMultiLanguageString;\n  price: string;\n}\n\nenum Languages {\n  ENGLISH = 'en',\n  CHINESE = 'zh',\n  VIETNAMESE = 'vi',\n}\n\nconst Menu = () => {\n  const [language, setLanguage] = useState(Languages.ENGLISH);\n  const [activeCategory, setActiveCategory] = useState<ICategory>(\n    menu.categories[0]\n  );\n  const sliderRef = useRef<HTMLDivElement>(null);\n\n  const scroll = (amount: number) =>\n    sliderRef.current?.scrollTo({\n      left: sliderRef.current.scrollLeft + amount,\n      behavior: 'smooth',\n    });\n\n  return (\n    <div className=\"menu\">\n      <Banner message={menu.delivery} tooltipMessages={menu.discounts} />\n      <div className=\"slider-container\">\n        <div className=\"left\" onClick={() => scroll(-500)}>\n          <FontAwesomeIcon icon={faChevronLeft} size=\"lg\" />\n        </div>\n        <div ref={sliderRef} className=\"slider\">\n          {menu.categories.map((category: ICategory) => (\n            <div\n              key={category.name[language]}\n              className=\"category\"\n              style={{\n                backgroundImage: `linear-gradient(rgba(0, 0, 0, 0.4), rgba(0, 0, 0, 0.4)), url(${category.image})`,\n                backgroundPosition: 'center',\n                backgroundSize: 'cover',\n                backgroundRepeat: 'no-repeat',\n              }}\n              onClick={() => setActiveCategory(category)}\n            >\n              {category.name[language]}\n            </div>\n          ))}\n        </div>\n        <div className=\"right\" onClick={() => scroll(500)}>\n          <FontAwesomeIcon icon={faChevronRight} size=\"lg\" />\n        </div>\n      </div>\n      <div className=\"active-category\">\n        <h1>{activeCategory.name[language]}</h1>\n        {activeCategory.description && (\n          <div className=\"description\">\n            {activeCategory.description[language]}\n          </div>\n        )}\n        <table>\n          <tbody>\n            {activeCategory.items.map(\n              ({ number, name, price }: IItem, index) => (\n                <tr key={index}>\n                  <td className=\"number\">{number}</td>\n                  <td className=\"name\">{name[language]}</td>\n                  <td className=\"price\">{price}</td>\n                </tr>\n              )\n            )}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default Menu;\n","import React, { useEffect, useState } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport './Navbar.css';\n\nconst Navbar = () => {\n  const location = useLocation();\n  const [transparent, setTransparent] = useState(true);\n  useEffect(() => {\n    const path = location.pathname;\n    if (path === '/') setTransparent(true);\n    else setTransparent(false);\n  }, [location]);\n  return (\n    <div className={`navbar ${transparent ? 'transparent' : ''}`}>\n      <Link to=\"/\">\n        <div className=\"nav-item\">HOME</div>\n      </Link>\n      <Link to=\"about\">\n        <div className=\"nav-item\">ABOUT</div>\n      </Link>\n      <Link to=\"menu\">\n        <div className=\"nav-item\">MENU</div>\n      </Link>\n      <Link to=\"takeout-menu\">\n        <div className=\"nav-item\">T/O MENU</div>\n      </Link>\n      <Link to=\"contact\">\n        <div className=\"nav-item\">CONTACT</div>\n      </Link>\n    </div>\n  );\n};\n\nexport default Navbar;\n","import React from 'react';\nimport './Home.css';\n\nconst Home = () => (\n  <div className=\"home\">\n    <div className=\"center\">\n      <span className=\"name\">EMERALD PALACE</span>\n      <div className=\"contact-info\">\n        <span>55 CASTLERIDGE BLVD NE, CALGARY, AB T3J 3J8</span>\n        <a href=\"tel:+1-403-568-2832\">+1 (403) 568-2832</a>\n      </div>\n    </div>\n  </div>\n);\n\nexport default Home;\n","import React from 'react';\n\nconst About = () => <div className=\"about\"></div>;\n\nexport default About;\n","import React, { useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faInfoCircle } from '@fortawesome/free-solid-svg-icons';\nimport './Banner.css';\n\ninterface IProps {\n  message: string;\n  tooltipMessages: string[];\n}\n\nconst Banner = (props: IProps) => {\n  const [dismissed, setDismissed] = useState(false);\n  const [tooltipHidden, setTooltipHidden] = useState(true);\n  const { message, tooltipMessages } = props;\n\n  const toggleTooltip = () => setTooltipHidden(!tooltipHidden);\n\n  return (\n    <div className={`banner ${dismissed && 'dismissed'}`}>\n      <div onMouseEnter={toggleTooltip} onMouseLeave={toggleTooltip}>\n        <FontAwesomeIcon icon={faInfoCircle} />\n        <div className={`tooltip ${tooltipHidden && 'hidden'}`}>\n          {tooltipMessages.map((message, index) => (\n            <li key={index}>{message}</li>\n          ))}\n        </div>\n      </div>\n      <div className=\"message\">{message}</div>\n      <div className=\"close\" onClick={() => setDismissed(true)}>\n        ✕\n      </div>\n    </div>\n  );\n};\n\nexport default Banner;\n","import React, { useState, useRef } from 'react';\nimport Banner from '../Banner/Banner';\nimport menu from './takeout-menu.json';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faChevronLeft,\n  faChevronRight,\n} from '@fortawesome/free-solid-svg-icons';\nimport './Menu.css';\n\ninterface ICategory {\n  name: string;\n  image: string;\n  items: IItem[];\n  entrees?: IEntree[];\n}\n\ninterface IEntree {\n  number: string;\n  name: string;\n}\n\ninterface IItem {\n  number?: string;\n  name: string;\n  description?: string;\n  price: string | string[];\n}\n\nconst TakeoutMenu = () => {\n  const [activeCategory, setActiveCategory] = useState<ICategory>(\n    menu.categories[0]\n  );\n  const sliderRef = useRef<HTMLDivElement>(null);\n\n  const scroll = (amount: number) =>\n    sliderRef.current?.scrollTo({\n      left: sliderRef.current.scrollLeft + amount,\n      behavior: 'smooth',\n    });\n\n  return (\n    <div className=\"menu\">\n      <Banner message={menu.delivery} tooltipMessages={menu.discounts}></Banner>\n      <div className=\"slider-container\">\n        <div className=\"left\" onClick={() => scroll(-300)}>\n          <FontAwesomeIcon icon={faChevronLeft} size=\"lg\" />\n        </div>\n        <div ref={sliderRef} className=\"slider\">\n          {menu.categories.map((category: ICategory, index) => (\n            <div\n              key={index}\n              className=\"category\"\n              style={{\n                backgroundImage: `linear-gradient(rgba(0, 0, 0, 0.4), rgba(0, 0, 0, 0.4)), url(${category.image})`,\n                backgroundPosition: 'center',\n                backgroundSize: 'cover',\n                backgroundRepeat: 'no-repeat',\n              }}\n              onClick={() => setActiveCategory(category)}\n            >\n              {category.name}\n            </div>\n          ))}\n        </div>\n        <div className=\"right\" onClick={() => scroll(300)}>\n          <FontAwesomeIcon icon={faChevronRight} size=\"lg\" />\n        </div>\n      </div>\n      <div className=\"active-category\">\n        <h1>{activeCategory.name}</h1>\n        <table>\n          <tbody>\n            {activeCategory.items.some((item) => Array.isArray(item.price)) && (\n              <tr>\n                <th></th>\n                <th></th>\n                <th>Small</th>\n                <th>Large</th>\n              </tr>\n            )}\n            {activeCategory.items.map((item: IItem, index) => (\n              <tr key={index}>\n                {item.number && <td className=\"number\">{item.number}</td>}\n                <td className=\"name\">\n                  <div>\n                    <div>{item.name}</div>\n                    <div className=\"description\">{item.description}</div>\n                  </div>\n                </td>\n                {Array.isArray(item.price) ? (\n                  item.price.map((p, index) => <td key={index}>{p}</td>)\n                ) : (\n                  <td className=\"price\">{item.price}</td>\n                )}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n        {activeCategory.name === 'Dinner Specials' && (\n          <>\n            <h1>Entrées</h1>\n            <table>\n              <tbody>\n                {activeCategory.entrees?.map((entree: IEntree, index) => (\n                  <tr key={index}>\n                    <td>{entree.number}</td>\n                    <td>{entree.name}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default TakeoutMenu;\n","import React, { useRef, useEffect } from 'react';\nimport './Contact.css';\n\ndeclare global {\n  interface Window {\n    google: typeof google;\n  }\n}\n\ninterface Location {\n  lat: number;\n  lng: number;\n}\n\nconst GOOGLE_MAP_API_KEY = process.env.REACT_APP_GOOGLE_MAP_API_KEY;\n\nconst Contact = () => {\n  let googleMapRef = useRef<HTMLDivElement>(null);\n  let googleMap = useRef<google.maps.Map>();\n  let marker = useRef<google.maps.Marker>();\n  let restaurantLocation: Location = { lat: 51.098501, lng: -113.962162 };\n\n  const createGoogleMap = () =>\n    new window.google.maps.Map(googleMapRef.current as Element, {\n      zoom: 16,\n      center: restaurantLocation,\n      disableDefaultUI: true,\n    });\n\n  const createMarker = () =>\n    new window.google.maps.Marker({\n      position: restaurantLocation,\n      map: googleMap.current,\n    });\n\n  useEffect(() => {\n    const googleMapScript = document.createElement('script');\n\n    googleMapScript.src = `https://maps.googleapis.com/maps/api/js?key=${GOOGLE_MAP_API_KEY}`;\n    window.document.body.appendChild(googleMapScript);\n\n    googleMapScript.addEventListener('load', () => {\n      googleMap.current = createGoogleMap();\n      marker.current = createMarker();\n    });\n  }, [createGoogleMap, createMarker]);\n\n  return (\n    <div className=\"contact\">\n      <div className=\"contact-info\">\n        <div>\n          <h2>Location</h2>\n          <span>\n            55 CASTLERIDGE BLVD NE\n            <br />\n            CALGARY, AB T3J 3J8\n          </span>\n          <h2>Contact</h2>\n          <a href=\"tel:+1-403-568-2832\">+1 (403) 568-2832</a>\n          <h2>Hours</h2>\n          <div className=\"times\">\n            <ul className=\"days\">\n              <li>Mon</li>\n              <li>Tue</li>\n              <li>Wed</li>\n              <li>Thu</li>\n              <li>Fri</li>\n              <li>Sat</li>\n              <li>Sun</li>\n            </ul>\n            <ul className=\"hours\">\n              <li>4PM - 1AM</li>\n              <li>Closed</li>\n              <li>4PM - 1AM</li>\n              <li>4PM - 1AM</li>\n              <li>4PM - 2AM</li>\n              <li>4PM - 2AM</li>\n              <li>4PM - 1AM</li>\n            </ul>\n          </div>\n        </div>\n        <div className=\"google-map\" ref={googleMapRef} />\n      </div>\n    </div>\n  );\n};\n\nexport default Contact;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Navbar from './components/Navbar/Navbar';\nimport Home from './components/Home/Home';\nimport About from './components/About/About';\nimport Menu from './components/Menu/Menu';\nimport TakeoutMenu from './components/Menu/TakeoutMenu';\nimport Contact from './components/Contact/Contact';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"app\">\n        <Navbar />\n        <div className=\"main\">\n          <Switch>\n            <Route path=\"/about\">\n              <About />\n            </Route>\n            <Route path=\"/menu\">\n              <Menu />\n            </Route>\n            <Route path=\"/takeout-menu\">\n              <TakeoutMenu />\n            </Route>\n            <Route path=\"/contact\">\n              <Contact />\n            </Route>\n            <Route path=\"/\">\n              <Home />\n            </Route>\n          </Switch>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}